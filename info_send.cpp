#include <Windows.h>
#include <Winhttp.h>
#include <tchar.h>
#include <strsafe.h>
#include <cstring>

#pragma comment(lib, "Advapi32.lib")
#pragma comment(lib, "Winhttp.lib")

#define BUFSIZE 512

bool SendDataToServer(const TCHAR* data)
{
    // server url
    const LPCWSTR serverUrl = L"http://example.com/submit";

    // open a session
    HINTERNET hSession = WinHttpOpen(L"Windows HTTP Client", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);
        if (!hSession)
    {
        _tprintf(_T("Error: %d\n"), GetLastError());
        return false;
    }

    // open a connection
    HINTERNET hConnect = WinHttpConnect(hSession, serverUrl, INTERNET_DEFAULT_HTTP_PORT, 0);
    if (!hConnect)
    {
        _tprintf(_T("Error: %d\n"), GetLastError());
        WinHttpCloseHandle(hSession);
        return false;
    }

    // open a request
    HINTERNET hRequest = WinHttpOpenRequest(hConnect, L"POST", NULL, NULL, WINHTTP_NO_REFERER, WINHTTP_DEFAULT_ACCEPT_TYPES, 0);
    if (!hRequest)
    {
        _tprintf(_T("Error: %d\n"), GetLastError());
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return false;
    }

    // send the request
    BOOL bResults = WinHttpSendRequest(hRequest, L"Content-Type: application/x-www-form-urlencoded", -1L, (LPVOID)data, _tcslen(data) * sizeof(TCHAR), _tcslen(data) * sizeof(TCHAR), 0);
    if (!bResults)
    {
        _tprintf(_T("Error: %d\n"), GetLastError());
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return false;
    }

    // end the request
    bResults = WinHttpReceiveResponse(hRequest, NULL);
    if (!bResults)
    {
        _tprintf(_T("Error: %d\n"), GetLastError());
        WinHttpCloseHandle(hRequest);
        WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return false;
    }

    // close request handles
    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);

    return true;
}

int _tmain(int argc, _TCHAR* argv[])
{
    WCHAR machineGuid[BUFSIZE] = {};
    DWORD bufferSize = BUFSIZE;

    HKEY hKey;
    const wchar_t* keyName = L"SOFTWARE\\Microsoft\\Cryptography";
    if (RegOpenKeyExW(HKEY_LOCAL_MACHINE, keyName, 0, KEY_READ, &hKey) == ERROR_SUCCESS)
    {
        const wchar_t* valueName = L"MachineGuid";
        RegQueryValueExW(hKey, valueName, NULL, NULL, (LPBYTE)machineGuid, &bufferSize);

    }

    TCHAR username[BUFSIZE] = {};
    DWORD usernameSize = BUFSIZE;
    GetUserName(username, &usernameSize);

    TCHAR data[BUFSIZE] = {};
    WCHAR machineGuidTmp[BUFSIZE];
    wcscpy_s(machineGuidTmp, machineGuid);
        StringCchPrintf(data, BUFSIZE, _T("machineId=%s|%s"), machineGuidTmp, username);

    if (SendDataToServer(data))
    {
        _tprintf(_T("Data sent successfully\n"));
    }
    else
    {
        _tprintf(_T("Failed to send data\n"));
    }

    return 0;
}

